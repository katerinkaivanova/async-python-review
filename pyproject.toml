[tool.pytest.ini_options]
norecursedirs = "*.egg .eggs .* dist build docs .tox .git __pycache__ etc"
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true
addopts = [
  "--import-mode=importlib",
  "--strict-markers",
  "--strict-config",
  "--tb=short",
]
filterwarnings = [
  "ignore::DeprecationWarning:pytest_freezegun:17",
]


[tool.ruff]
select = [
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "F", # pyflakes
  "B", # flake-bugbear
  "Q", # flake8-quotes
  "I", # isort
  "S", # flake8-bandit
  "PT", # flake8-pytest-style
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "C4", # flake8-comprehensions
  "PIE", # flake8-pie
  "TRY", # tryceratops
  "RUF", # ruff
  "PL", # pylint
  "DTZ", # flake8-datetimez
  "UP", # pyupgrade
  "C90", # mccabe
  "COM", # flake8-commas
  "INP", # flake8-no-pep420
  "TID", # flake8-tidy-imports
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  "EM", # flake8-errmsg
  "FA", # flake8-future-annotations
  "PERF", # Perflint
  "PYI" # flake8-pyi
]

ignore = [
  "E501", # Never enforce line length
  "RET504", # Unnecessary variable assignment before `return` statement
  "RUF001", # ruff unicode specific rules
  "RUF002", # ruff unicode specific rules
  "RUF003", # ruff unicode specific rules
  "TRY003", # Duplicates EM101 warning
  "TRY200", # Duplicates B904 warning
]

unfixable = [
  "B", # Avoid trying to fix flake8-bugbear violations.
  "ERA", # Avoid deleting commented-out code
]

line-length = 90
target-version = "py311"

[tool.ruff.per-file-ignores]
"tests/*" = [
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "ERA001", # Found commented-out code
  "PLR0913", # Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "S101", # Use of `assert` detected
]

[tool.ruff.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
lines-after-imports = 2

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true


[tool.mypy]
plugins = ["pydantic.mypy"]

strict = true
follow_imports = "normal"
ignore_missing_imports = true

allow_redefinition = false
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_return_any = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true

disable_error_code = ["type-abstract"]

[tool.pydantic-mypy]
init_forbid_extra = false
init_typed = false
warn_required_dynamic_aliases = true
